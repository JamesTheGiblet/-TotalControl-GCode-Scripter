üöÄ TotalControl GCode Scripter ‚Äì Development Roadmap
üõ†Ô∏è Overview

TotalControl is an AI-powered adaptive GCode scripting tool, designed to optimize 3D printing workflows, enhance fabrication control, and introduce dynamic AI-driven tuning for material-aware adjustments. This roadmap outlines phased development, ensuring a structured approach to implementation.

üìå Phase 1: Core Framework & Initial Setup
‚úÖ Repository Structure ‚Äì Establish modular directory for organized development - Complete
‚úÖ Basic Input Handling ‚Äì Implement structured parametric descriptors (B√©zier, Voronoi, etc.) - Complete
‚úÖ Initial GCode Generation ‚Äì Convert parametric descriptions into raw GCode - Complete
‚úÖ Basic Testing & Validation ‚Äì Unit test path translation and output consistency - Complete
Milestone: Set up core GCode translation pipeline  - Complete 13.05.2025


‚öôÔ∏è Phase 2: AI-Driven Path Optimization
  üîπ Core Enhancements
    1.  Path Efficiency Analysis ‚Äì Minimize travel moves & optimize deposition sequences.
        * 1.1 Algorithm Development (Travel Minimization):
            - ‚úÖ Research and select initial algorithms: Nearest Neighbor (NN) and 2-opt implemented for path reordering within layers. (Further exploration of advanced TSP variations planned).
            - ‚úÖ Initial focus: Optimizing the order of non-printing travel moves between distinct printing segments within a layer. (Implemented via segment reordering).
            - ‚úÖ Consider constraints like maintaining print order for structural integrity (e.g., perimeters before infill if required by deposition strategy). (Implemented via FEATURE_PRINT_ORDER).
            - ‚úÖ Implement logic to identify and eliminate redundant travel movements. (Implemented).
            - ‚úÖ Added logging for travel distance verification before/after optimization.
            - ‚úÖ Increased 2-opt iterations for more thorough refinement.
            - üöß Addressing layer reassembly logic to ensure correctness of optimized feature block ordering.
        * 1.2 Algorithm Development (Deposition Sequence Optimization):
            - Explore strategies to optimize the order in which different features (e.g., perimeters, infill) are printed within a layer for better adhesion and reduced stress.
            - Consider the impact of printing small features before large ones or vice versa.
    2.  Extrusion Rate Adaptation ‚Äì AI-driven tuning based on geometry & material constraints.
        * 2.1 Feature Geometry Analysis:
            - Develop methods to analyze the geometric features of the print path (e.g., corners, curves, infill density, overhangs).
            - Identify how these features might require adjustments to the extrusion rate for optimal quality.
        * 2.2 Material Property Integration:
            - Begin to integrate basic material properties (e.g., viscosity, recommended extrusion temperature) into the optimization model. This might involve using lookup tables or simple material models initially.
            - Consider how different materials flow and behave under varying speeds and pressures.
        * 2.3 AI Model Development (Initial):
            - Experiment with simple machine learning models (e.g., linear regression, decision trees) trained on simulated or limited real-world data to predict optimal extrusion rates based on geometry and material.
            - Focus on a few key scenarios (e.g., sharp corners, thin walls).
    3.  Acceleration & Jerk Control ‚Äì Stability enhancements for high-speed precision.
        * 3.1 Kinematic Analysis:
            - Analyze the impact of acceleration and jerk settings on print quality, especially at higher speeds.
            - Consider the mechanical limitations of typical 3D printer setups.
        * 3.2 Algorithm Development (Dynamic Adjustment):
            - Develop algorithms that can dynamically adjust acceleration and jerk values based on the complexity of the path (e.g., smoother movements for curves, more controlled for sharp angles) and potentially the printer's capabilities (this might require some basic profiling or user input).
        * 3.3 Safety Limits Implementation:
            - Incorporate safety limits to prevent the optimization from generating GCode that could damage the printer.
    4.  Integration with Parametric Inputs (Moved from 1.3 for clarity as it applies broadly):
        * 1.3 Ensure the travel minimization and deposition sequence algorithms can directly process the structured path data (derived from B√©zier, Voronoi, etc.) generated in Phase 1 OR operate on G-code derived from it. (Currently operating on G-code).
        * Specifically, the travel minimization algorithm must take Phase 1 GCode/path data as input and output a reordered sequence of movements. (Current approach).
        * Develop or refine data structures (e.g., graph representation of paths within a layer) to represent print paths in a way that is suitable for these optimization algorithms. (Ongoing as algorithms evolve).


  üîπ Benchmark Testing Strategy
    0.  Design Initial Test Suite and Baseline Definition:
        - Create a diverse set of STL models for testing, including but not limited to:
            - Calibration Cube (for basic dimensional accuracy).
            - Overhang Test (to assess extrusion, cooling, and support optimization).
            - Bridging Test (to evaluate material flow, sagging, and cooling).
            - Complex Geometry Model (e.g., intricate sculpture, mechanical part with fine details, internal structures).
            - Infill Test Model (designed to highlight differences in infill pathing and density effects).
            - High-Speed Test Model (e.g., a model with many short segments and direction changes).
        - For each test print, clearly define the baseline generation method:
            - If using a standard slicer: Specify slicer name (e.g., PrusaSlicer, Cura), version, and a consistent set of key slicing parameters (layer height, speed, infill, etc.) to form the "baseline profile".
            - If using Phase 1 output: Specify the exact parameters and methods used for raw GCode generation from parametric inputs.
    1.  Compare AI-optimized vs baseline GCode outputs on identical test prints.
        * 1.1 Baseline GCode Generation:
            - Generate "baseline" GCode for all test prints using the methods defined in `0. Design Initial Test Suite and Baseline Definition`.
        * 1.2 AI-Optimized GCode Generation:
            - Generate the corresponding GCode for the same test prints using your developing AI-enhanced optimization engine.
    2.  Define and Measure Performance Metrics:
        - Speed:
            - Measurement 1: Estimated Print Time from GCode:
                - Definition: The total time the printer is expected to spend executing movements and extruding material, as calculated by analyzing the GCode file. This is often indicated by slicers or can be estimated by summing the duration of each command based on feed rates.
                - Unit of Measurement: Minutes and seconds (e.g., 1 hour 35 minutes 20 seconds) or total seconds.
                - Acceptable Range of Success (for Optimization): A reduction in estimated print time compared to the baseline GCode for the same test print. Aiming for a consistent 5-15% reduction in estimated print time for complex prints could be a good initial target. (Initial logging for travel distance reduction supports this).
            - Measurement 2: Actual Print Time:
                - Definition: The real-world time taken for the printer to complete the test print, measured from the start of the print job to its completion.
                - Unit of Measurement: Minutes and seconds (e.g., 1 hour 40 minutes 10 seconds) or total seconds.
                - Acceptable Range of Success (for Optimization): A reduction in actual print time compared to the baseline print of the same model. This should ideally correlate with the estimated print time reduction. Aim for a consistent 5-10% reduction in actual print time for complex prints, acknowledging that factors like printer acceleration and jerk settings can influence this.
        - Precision:
            - Measurement: Deviation from Designed Dimensions:
                - Definition: The difference between the intended dimensions of specific features on the test print (as defined in the CAD model) and the actual measured dimensions of the printed part.
                - Unit of Measurement: Millimeters (mm).
                - Measurement Tool: Digital calipers with a resolution of at least 0.01 mm. For more intricate features, consider pin gauges or a CMM if available.
                - Features to Measure:
                    - Overall dimensions (X, Y, Z).
                    - Internal features (e.g., diameter of holes, distance between features).
                    - External features (e.g., width of a thin wall, diameter of a cylinder).
                - Acceptable Tolerance Range: For general-purpose testing, aiming for a deviation of ¬±0.1 mm to ¬±0.2 mm for dimensions up to 100 mm. The goal of optimization should be to maintain or improve precision compared to the baseline.
        - Material Efficiency:
            - Measurement: Estimated Filament Usage from GCode:
                - Definition: The total length or volume of filament the printer is instructed to extrude, as calculated by analyzing the GCode file.
                - Unit of Measurement: Millimeters (mm) of filament length or cubic millimeters (mm¬≥) of filament volume.
                - Acceptable Range of Success (for Optimization): A reduction in estimated filament usage compared to the baseline GCode, primarily achieved through reduced travel moves. Aim for a consistent 2-5% reduction for prints with significant travel.
        - Failure Prevention:
            - Measurement: Qualitative Assessment of Defects:
                - Definition: A subjective evaluation of the presence and severity of common 3D printing defects on specific test prints designed to induce these issues.
                - Unit of Measurement: A qualitative scale (e.g., None, Slight, Moderate, Severe) or a binary (Pass/Fail) based on predefined criteria for each defect.
                - Defects to Assess (on specific test prints):
                    - Stringing: Presence of thin strands of filament between separated parts of the print.
                    - Warping: Lifting of corners or edges of the print from the build plate.
                    - Poor Overhangs: Sagging or drooping of unsupported sections.
                    - Layer Adhesion Issues: Visible separation or weakness between layers.
                    - Surface Finish Imperfections: Bumps, gaps, or inconsistencies in the surface.
                - Acceptable Range of Success (for Optimization): The optimized GCode should ideally result in a reduction in the severity or complete elimination of these defects compared to the baseline. A "Pass" on a defect-specific test print with optimized GCode where the baseline failed would be a clear success.
    3.  Run stress tests ‚Äì Complex geometries, varying infill densities, rapid transitions.
        * 3.1 Complex Geometry Prints:
            - Utilize intricate models (from test suite in `0.`) to evaluate how optimization handles detailed features and complex path planning.
        * 3.2 Variable Infill Tests:
            - Test different infill patterns and densities (using Infill Test Model from `0.`) to see how the AI optimizes paths and extrusion for these varying internal structures.
        * 3.3 Rapid Transition Tests:
            - Use High-Speed Test Model (from `0.`) with frequent changes in direction and speed to assess the impact of acceleration and jerk control.
    4.  Capture before-and-after results ‚Äì Visual comparisons + data logging for insights.
        * 4.1 Visual Documentation:
            - Take detailed, consistent photographs (and potentially videos) of printed test pieces generated from both baseline and optimized GCode, highlighting any differences in surface finish, accuracy, and defects.
        * 4.2 Data Logging System:
            - Establish a structured data logging system (e.g., spreadsheet like Google Sheets/Excel, or a simple database like SQLite).
            - For each test print run (baseline and optimized versions):
                - Record: Test print identifier/version, GCode source (baseline/optimized), key optimization parameters applied.
                - Record: All defined performance metrics (Speed, Precision, Material Efficiency, Failure/Quality scores).
                - Record: Qualitative observations, notes on print process, any unexpected issues or successes.
            (Initial console logging for travel distance is a first step towards this).
  üîπ Refinement & Industry Applications
    1.  Iterate based on test results ‚Äì Adjust algorithms for real-world variability.
        * 1.1 Data Analysis:
            - Thoroughly analyze the data collected during benchmark testing to identify areas where the optimization algorithms are performing well and where improvements are needed.
        * 1.2 Algorithm Tuning:
            - Refine the parameters and logic of your path efficiency, extrusion rate adaptation, and acceleration/jerk control algorithms based on the insights gained from the test data.
            - Consider edge cases and scenarios where the initial algorithms might not perform optimally.
    2.  Explore integrations ‚Äì Potential compatibility with slicers like PrusaSlicer or MatterControl.
        * 2.1 Slicer Output Analysis:
            - Examine the GCode output formats of popular slicers to understand their structure and how they represent print paths and parameters.
        * 2.2 Integration Strategy Brainstorming:
            - Explore different approaches for integrating TotalControl, such as a post-processing script, a plugin, or a standalone GCode generator that can be used in conjunction with slicers.
            - Focus on one or two potential slicers for initial investigation.
    3.  Engage with the community ‚Äì Gather feedback from engineers, makers, AI innovators.
        * 3.1 Documentation and Communication:
            - Create clear documentation outlining the goals and current capabilities of Phase 2.
            - Share updates and findings with the 3D printing and AI communities through forums, social media, or dedicated project pages.
        * 3.2 Feedback Collection:
            - Actively solicit feedback on the optimization strategies, testing methodologies, and potential use cases.
    4.  Refine optimization framework ‚Äì Strengthen modular adaptability for different fabrication needs.
        * 4.1 Modular Design Review:
            - Assess the modularity of your codebase to ensure that different optimization components (pathing, extrusion, motion control) can be easily modified and extended.
        * 4.2 Parameterization and Configuration:
            - Develop a system for parameterizing the optimization algorithms, allowing users or future AI models to fine-tune the behavior for specific materials, printers, or desired outcomes.
Milestone: Develop an initial AI-enhanced optimization engine


üö® Phase 3: Error Prediction & Correction
‚úÖ Failure Prediction Model ‚Äì AI-based simulation to detect weak structures & collisions
‚úÖ Heuristic Anomaly Detection ‚Äì Rule-based analysis for common print errors (thin walls, supports)
‚úÖ Automated Fixes & Live Adjustments ‚Äì Real-time corrections for unstable regions
‚úÖ Firmware Integration ‚Äì API for Klipper & Marlin dynamic parameter tuning
Milestone: Implement proactive error detection & auto-correction


üß™ Phase 4: Material-Aware Adaptation
‚úÖ Material Database ‚Äì Establish filament behavior profiles (viscosity, cooling rates, adhesion)
‚úÖ Dynamic Parameter Adjustments ‚Äì Modify extrusion rate & temperature per material
‚úÖ Adaptive Learning Model ‚Äì Reinforcement learning for better material tuning
Milestone: Enable AI-based material-aware optimization


üîó Phase 5: Extensibility & Slicer Compatibility
‚úÖ Customizable Output Formats ‚Äì Ensure compatibility with Marlin, Klipper, OctoPrint
‚úÖ User-Friendly CLI & API ‚Äì Develop command-line & Python API tools
‚úÖ Community Contribution Framework ‚Äì Define issue tracking, PR guidelines, & modular extensions
Milestone: Provide open-source adaptability & ease of integration


üî• Phase 6: Advanced Fabrication Enhancements
‚úÖ Nonplanar Extrusion Engine ‚Äì AI-generated zigzag paths & dynamic layer height modulation
‚úÖ Procedural Lattice Structures ‚Äì Adaptive mechanical designs for lightweight strength
‚úÖ Custom GCode Extensions ‚Äì Expand commands beyond conventional slicers
Milestone: Unlock experimental fabrication workflows & non-standard printing techniques


üèÅ Current Development Status & Next Steps
üöß We are currently in: Phase 2 - AI-Driven Path Optimization, focusing on solidifying and verifying initial Travel Minimization algorithms (1.1).
üîú Next milestone: Complete correction of layer reassembly logic, then systematically benchmark the NN + 2-opt travel minimization. Following that, begin exploration for 1.2 Deposition Sequence Optimization.


üõ†Ô∏è Installation & Contribution
Clone the repository and install dependencies:
git clone https://github.com/JamesTheGiblet/TotalControl.git  
cd TotalControl  
pip install -r requirements.txt  


Run main process:
python main.py  


Want to contribute? Check out CONTRIBUTING.md for guidelines!

üöÄ Let's build the future of AI-powered fabrication together!
