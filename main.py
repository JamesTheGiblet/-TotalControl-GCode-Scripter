# main.py
# This script serves as the main entry point and demonstrator for the TotalControl
# G-code generation and optimization pipeline. It showcases how to use various
# modules to convert a JSON path description into optimized G-code.

#Imports
import json
from core.gcode_generator import generate_gcode_from_json
from core.ai_optimizer import optimize_gcode
from core.utils import parse_json_input

# Import the modules
from modules.ai_pathing import generate_gcode_lattice, generate_gcode_honeycomb, apply_modifier, apply_constraint

# Example JSON input (same as before for demonstration)
json_example = {
    "path": {
        "segments": [
            {"type": "line", "start": [0, 0, 0], "end": [100, 0, 0]},
            {"type": "arc", "center": [100, 50, 0], "radius": 50, "start_angle": 0, "end_angle": 90, "clockwise": True},
            {"type": "bezier", "control_points": [[150, 50, 0], [200, 100, 50], [250, 50, 0]], "num_points": 20},
            {"type": "spiral", "center": [0, 0, 0], "inner_radius": 10, "outer_radius": 50, "turns": 5, "pitch": 2},
            {"type": "style", "style_type": "organic", "sub_segments": [{"type": "spiral", "center": [0, 0, 0], "inner_radius": 10, "outer_radius": 50, "turns": 5, "pitch": 2}]},
            {"type": "repeat", "count": 3, "transform": {"rotate": ["z", 120]}, "segment": {"type": "line", "start": [0, 0, 0], "end": [50, 0, 0]}},
            {"type": "structure", "structure_type": "lattice", "density": 0.6, "base_segment": {"type": "line", "start": [0, 0, 0], "end": [10, 10, 10]}}
        ],
        "modifiers": [
            {"type": "offset", "distance": 5},
            {"type": "smooth", "level": 2}
        ],
        "constraints": [
            {"type": "connect", "previous_segment": True},
            {"type": "tangent", "direction": [1, 0, 0]}
        ]
    }
}

# Example material properties
material_properties = {
    "name": "PLA",
    "density": 1.24,
    "viscosity": 100,
    "thermal_conductivity": 0.13,
    "glass_transition_temp": 60,
    "max_flow_rate": 10,
}

# Example printer capabilities
printer_capabilities = {
    "max_acceleration": 500,
    "max_jerk": 10,
    "max_speed_x": 200,
    "max_speed_y": 200,
    "max_speed_z": 50,
    "max_ext_speed": 50,
    "nozzle_diameter": 0.4,
}

if __name__ == "__main__":
    # 1. Generate G-code from JSON input using the function from core.gcode_generator
    gcode_commands = generate_gcode_from_json(json_example)
    print("Raw G-code:\n", "\n".join(gcode_commands))

    # 2. Optimize G-code using the AI optimizer
    optimized_gcode = optimize_gcode(gcode_commands, material_properties, printer_capabilities)
    print("\nOptimized G-code:\n", "\n".join(optimized_gcode))

    # 3. Example of generating a lattice structure G-code using AI pathing
    lattice_gcode = generate_gcode_lattice(json_example["path"]["segments"][-1]["base_segment"], json_example["path"]["segments"][-1]["density"])
    print("\nLattice G-code:\n", "\n".join(lattice_gcode))

    # 4. Apply some modifiers (e.g., offset, smooth) to the GCode
    # Ensure you're passing the first segment of the path as an example
    # Note: `gcode_commands` (generated by `generate_gcode_from_json`) already had 
    # these modifiers applied. This section demonstrates calling `apply_modifier` iteratively.
    segment_for_example = json_example["path"]["segments"][0]  # Using the first segment as an example
    
    # Start with the G-code you want to modify. 
    # Using `gcode_commands` as in the original script for this demonstration block.
    gcode_after_step4_modifiers = list(gcode_commands) # Create a copy to modify

    for modifier_item in json_example["path"]["modifiers"]:
        gcode_after_step4_modifiers = apply_modifier(gcode_after_step4_modifiers, modifier_item, segment_for_example)
    
    print("\nG-code after modifiers (applied in main.py step 4):\n", "\n".join(gcode_after_step4_modifiers))

    # 5. Apply constraints (e.g., tangent) to the GCode
    # Apply constraints to the G-code that was just modified in step 4.
    # Note: These constraints were also already applied by `generate_gcode_from_json`.
    gcode_after_step5_constraints = list(gcode_after_step4_modifiers) # Start with G-code from previous step

    for constraint_item in json_example["path"]["constraints"]:
        gcode_after_step5_constraints = apply_constraint(gcode_after_step5_constraints, constraint_item, segment_for_example)
        
    print("\nG-code with constraints applied (in main.py step 5):\n", "\n".join(gcode_after_step5_constraints))
